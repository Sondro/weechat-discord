/* automatically generated by rust-bindgen */
/*  bindgen weechat-plugin.h 
    --no-layout-tests  
    --whitelist-type 't_config.*|t_gui.*|t_infolist.*|t_upgrade_file|t_weelist.*|t_arraylist|t_hashtable|t_hdata|timeval|WEECHAT.*|weechat.*' 
    --whitelist-var 'WEECHAT.*|weechat.*' 
    --whitelist-function 'WEECHAT.*|weechat.*' 
    --blacklist-type ".*darwin.*|time_t|socklen_t|c_char|c_int|c_uint|c_void"  
    --ctypes-prefix "libc"
    --raw-line '#![allow(non_camel_case_types)]'
    --raw-line "use libc::*;"
*/

#![allow(non_camel_case_types)]
use libc::{self, *};

pub const WEECHAT_PLUGIN_API_VERSION: &'static [u8; 12usize] = b"20180520-01\0";
pub const WEECHAT_RC_OK: u32 = 0;
pub const WEECHAT_RC_OK_EAT: u32 = 1;
pub const WEECHAT_RC_ERROR: i32 = -1;
pub const WEECHAT_CONFIG_READ_OK: u32 = 0;
pub const WEECHAT_CONFIG_READ_MEMORY_ERROR: i32 = -1;
pub const WEECHAT_CONFIG_READ_FILE_NOT_FOUND: i32 = -2;
pub const WEECHAT_CONFIG_WRITE_OK: u32 = 0;
pub const WEECHAT_CONFIG_WRITE_ERROR: i32 = -1;
pub const WEECHAT_CONFIG_WRITE_MEMORY_ERROR: i32 = -2;
pub const WEECHAT_CONFIG_OPTION_NULL: &'static [u8; 5usize] = b"null\0";
pub const WEECHAT_CONFIG_OPTION_SET_OK_CHANGED: u32 = 2;
pub const WEECHAT_CONFIG_OPTION_SET_OK_SAME_VALUE: u32 = 1;
pub const WEECHAT_CONFIG_OPTION_SET_ERROR: u32 = 0;
pub const WEECHAT_CONFIG_OPTION_SET_OPTION_NOT_FOUND: i32 = -1;
pub const WEECHAT_CONFIG_OPTION_UNSET_OK_NO_RESET: u32 = 0;
pub const WEECHAT_CONFIG_OPTION_UNSET_OK_RESET: u32 = 1;
pub const WEECHAT_CONFIG_OPTION_UNSET_OK_REMOVED: u32 = 2;
pub const WEECHAT_CONFIG_OPTION_UNSET_ERROR: i32 = -1;
pub const WEECHAT_LIST_POS_SORT: &'static [u8; 5usize] = b"sort\0";
pub const WEECHAT_LIST_POS_BEGINNING: &'static [u8; 10usize] = b"beginning\0";
pub const WEECHAT_LIST_POS_END: &'static [u8; 4usize] = b"end\0";
pub const WEECHAT_HASHTABLE_INTEGER: &'static [u8; 8usize] = b"integer\0";
pub const WEECHAT_HASHTABLE_STRING: &'static [u8; 7usize] = b"string\0";
pub const WEECHAT_HASHTABLE_POINTER: &'static [u8; 8usize] = b"pointer\0";
pub const WEECHAT_HASHTABLE_BUFFER: &'static [u8; 7usize] = b"buffer\0";
pub const WEECHAT_HASHTABLE_TIME: &'static [u8; 5usize] = b"time\0";
pub const WEECHAT_HDATA_OTHER: u32 = 0;
pub const WEECHAT_HDATA_CHAR: u32 = 1;
pub const WEECHAT_HDATA_INTEGER: u32 = 2;
pub const WEECHAT_HDATA_LONG: u32 = 3;
pub const WEECHAT_HDATA_STRING: u32 = 4;
pub const WEECHAT_HDATA_POINTER: u32 = 5;
pub const WEECHAT_HDATA_TIME: u32 = 6;
pub const WEECHAT_HDATA_HASHTABLE: u32 = 7;
pub const WEECHAT_HDATA_SHARED_STRING: u32 = 8;
pub const WEECHAT_HDATA_LIST_CHECK_POINTERS: u32 = 1;
pub const WEECHAT_HOTLIST_LOW: &'static [u8; 2usize] = b"0\0";
pub const WEECHAT_HOTLIST_MESSAGE: &'static [u8; 2usize] = b"1\0";
pub const WEECHAT_HOTLIST_PRIVATE: &'static [u8; 2usize] = b"2\0";
pub const WEECHAT_HOTLIST_HIGHLIGHT: &'static [u8; 2usize] = b"3\0";
pub const WEECHAT_HOOK_PROCESS_RUNNING: i32 = -1;
pub const WEECHAT_HOOK_PROCESS_ERROR: i32 = -2;
pub const WEECHAT_HOOK_PROCESS_CHILD: i32 = -3;
pub const WEECHAT_HOOK_CONNECT_OK: u32 = 0;
pub const WEECHAT_HOOK_CONNECT_ADDRESS_NOT_FOUND: u32 = 1;
pub const WEECHAT_HOOK_CONNECT_IP_ADDRESS_NOT_FOUND: u32 = 2;
pub const WEECHAT_HOOK_CONNECT_CONNECTION_REFUSED: u32 = 3;
pub const WEECHAT_HOOK_CONNECT_PROXY_ERROR: u32 = 4;
pub const WEECHAT_HOOK_CONNECT_LOCAL_HOSTNAME_ERROR: u32 = 5;
pub const WEECHAT_HOOK_CONNECT_GNUTLS_INIT_ERROR: u32 = 6;
pub const WEECHAT_HOOK_CONNECT_GNUTLS_HANDSHAKE_ERROR: u32 = 7;
pub const WEECHAT_HOOK_CONNECT_MEMORY_ERROR: u32 = 8;
pub const WEECHAT_HOOK_CONNECT_TIMEOUT: u32 = 9;
pub const WEECHAT_HOOK_CONNECT_SOCKET_ERROR: u32 = 10;
pub const WEECHAT_HOOK_CONNECT_GNUTLS_CB_VERIFY_CERT: u32 = 0;
pub const WEECHAT_HOOK_CONNECT_GNUTLS_CB_SET_CERT: u32 = 1;
pub const WEECHAT_HOOK_SIGNAL_STRING: &'static [u8; 7usize] = b"string\0";
pub const WEECHAT_HOOK_SIGNAL_INT: &'static [u8; 4usize] = b"int\0";
pub const WEECHAT_HOOK_SIGNAL_POINTER: &'static [u8; 8usize] = b"pointer\0";
pub type __uint8_t = libc::c_uchar;
pub type __uint32_t = libc::c_uint;
pub type sa_family_t = __uint8_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_len: __uint8_t,
    pub sa_family: sa_family_t,
    pub sa_data: [libc::c_char; 14usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_config_option {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_config_section {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_config_file {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_gui_window {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_gui_buffer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_gui_bar {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_gui_bar_item {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_gui_bar_window {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_gui_completion {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_gui_nick {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_gui_nick_group {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_infolist {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_infolist_item {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_upgrade_file {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_weelist {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_weelist_item {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_arraylist {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_hashtable {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_hdata {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct t_weechat_plugin {
    pub filename: *mut libc::c_char,
    pub handle: *mut libc::c_void,
    pub name: *mut libc::c_char,
    pub description: *mut libc::c_char,
    pub author: *mut libc::c_char,
    pub version: *mut libc::c_char,
    pub license: *mut libc::c_char,
    pub charset: *mut libc::c_char,
    pub priority: libc::c_int,
    pub initialized: libc::c_int,
    pub debug: libc::c_int,
    pub variables: *mut t_hashtable,
    pub prev_plugin: *mut t_weechat_plugin,
    pub next_plugin: *mut t_weechat_plugin,
    pub plugin_get_name: ::std::option::Option<
        unsafe extern "C" fn(plugin: *mut t_weechat_plugin) -> *const libc::c_char,
    >,
    pub charset_set: ::std::option::Option<
        unsafe extern "C" fn(plugin: *mut t_weechat_plugin, charset: *const libc::c_char),
    >,
    pub iconv_to_internal: ::std::option::Option<
        unsafe extern "C" fn(charset: *const libc::c_char, string: *const libc::c_char)
            -> *mut libc::c_char,
    >,
    pub iconv_from_internal: ::std::option::Option<
        unsafe extern "C" fn(charset: *const libc::c_char, string: *const libc::c_char)
            -> *mut libc::c_char,
    >,
    pub gettext: ::std::option::Option<
        unsafe extern "C" fn(string: *const libc::c_char) -> *const libc::c_char,
    >,
    pub ngettext: ::std::option::Option<
        unsafe extern "C" fn(
            single: *const libc::c_char,
            plural: *const libc::c_char,
            count: libc::c_int,
        ) -> *const libc::c_char,
    >,
    pub strndup: ::std::option::Option<
        unsafe extern "C" fn(string: *const libc::c_char, length: libc::c_int) -> *mut libc::c_char,
    >,
    pub string_tolower: ::std::option::Option<unsafe extern "C" fn(string: *mut libc::c_char)>,
    pub string_toupper: ::std::option::Option<unsafe extern "C" fn(string: *mut libc::c_char)>,
    pub strcasecmp: ::std::option::Option<
        unsafe extern "C" fn(string1: *const libc::c_char, string2: *const libc::c_char)
            -> libc::c_int,
    >,
    pub strcasecmp_range: ::std::option::Option<
        unsafe extern "C" fn(
            string1: *const libc::c_char,
            string2: *const libc::c_char,
            range: libc::c_int,
        ) -> libc::c_int,
    >,
    pub strncasecmp: ::std::option::Option<
        unsafe extern "C" fn(
            string1: *const libc::c_char,
            string2: *const libc::c_char,
            max: libc::c_int,
        ) -> libc::c_int,
    >,
    pub strncasecmp_range: ::std::option::Option<
        unsafe extern "C" fn(
            string1: *const libc::c_char,
            string2: *const libc::c_char,
            max: libc::c_int,
            range: libc::c_int,
        ) -> libc::c_int,
    >,
    pub strcmp_ignore_chars: ::std::option::Option<
        unsafe extern "C" fn(
            string1: *const libc::c_char,
            string2: *const libc::c_char,
            chars_ignored: *const libc::c_char,
            case_sensitive: libc::c_int,
        ) -> libc::c_int,
    >,
    pub strcasestr: ::std::option::Option<
        unsafe extern "C" fn(string: *const libc::c_char, search: *const libc::c_char)
            -> *const libc::c_char,
    >,
    pub strlen_screen:
        ::std::option::Option<unsafe extern "C" fn(string: *const libc::c_char) -> libc::c_int>,
    pub string_match: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const libc::c_char,
            mask: *const libc::c_char,
            case_sensitive: libc::c_int,
        ) -> libc::c_int,
    >,
    pub string_replace: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const libc::c_char,
            search: *const libc::c_char,
            replace: *const libc::c_char,
        ) -> *mut libc::c_char,
    >,
    pub string_expand_home:
        ::std::option::Option<unsafe extern "C" fn(path: *const libc::c_char) -> *mut libc::c_char>,
    pub string_eval_path_home: ::std::option::Option<
        unsafe extern "C" fn(
            path: *const libc::c_char,
            pointers: *mut t_hashtable,
            extra_vars: *mut t_hashtable,
            options: *mut t_hashtable,
        ) -> *mut libc::c_char,
    >,
    pub string_remove_quotes: ::std::option::Option<
        unsafe extern "C" fn(string: *const libc::c_char, quotes: *const libc::c_char)
            -> *mut libc::c_char,
    >,
    pub string_strip: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const libc::c_char,
            left: libc::c_int,
            right: libc::c_int,
            chars: *const libc::c_char,
        ) -> *mut libc::c_char,
    >,
    pub string_convert_escaped_chars: ::std::option::Option<
        unsafe extern "C" fn(string: *const libc::c_char) -> *mut libc::c_char,
    >,
    pub string_mask_to_regex:
        ::std::option::Option<unsafe extern "C" fn(mask: *const libc::c_char) -> *mut libc::c_char>,
    pub string_regex_flags: ::std::option::Option<
        unsafe extern "C" fn(
            regex: *const libc::c_char,
            default_flags: libc::c_int,
            flags: *mut libc::c_int,
        ) -> *const libc::c_char,
    >,
    pub string_regcomp: ::std::option::Option<
        unsafe extern "C" fn(
            preg: *mut libc::c_void,
            regex: *const libc::c_char,
            default_flags: libc::c_int,
        ) -> libc::c_int,
    >,
    pub string_has_highlight: ::std::option::Option<
        unsafe extern "C" fn(string: *const libc::c_char, highlight_words: *const libc::c_char)
            -> libc::c_int,
    >,
    pub string_has_highlight_regex: ::std::option::Option<
        unsafe extern "C" fn(string: *const libc::c_char, regex: *const libc::c_char)
            -> libc::c_int,
    >,
    pub string_replace_regex: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const libc::c_char,
            regex: *mut libc::c_void,
            replace: *const libc::c_char,
            reference_char: libc::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(data: *mut libc::c_void, text: *const libc::c_char)
                    -> *mut libc::c_char,
            >,
            callback_data: *mut libc::c_void,
        ) -> *mut libc::c_char,
    >,
    pub string_split: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const libc::c_char,
            separators: *const libc::c_char,
            keep_eol: libc::c_int,
            num_items_max: libc::c_int,
            num_items: *mut libc::c_int,
        ) -> *mut *mut libc::c_char,
    >,
    pub string_split_shell: ::std::option::Option<
        unsafe extern "C" fn(string: *const libc::c_char, num_items: *mut libc::c_int)
            -> *mut *mut libc::c_char,
    >,
    pub string_free_split:
        ::std::option::Option<unsafe extern "C" fn(split_string: *mut *mut libc::c_char)>,
    pub string_build_with_split_string: ::std::option::Option<
        unsafe extern "C" fn(
            split_string: *mut *const libc::c_char,
            separator: *const libc::c_char,
        ) -> *mut libc::c_char,
    >,
    pub string_split_command: ::std::option::Option<
        unsafe extern "C" fn(command: *const libc::c_char, separator: libc::c_char)
            -> *mut *mut libc::c_char,
    >,
    pub string_free_split_command:
        ::std::option::Option<unsafe extern "C" fn(split_command: *mut *mut libc::c_char)>,
    pub string_format_size:
        ::std::option::Option<unsafe extern "C" fn(size: libc::c_ulonglong) -> *mut libc::c_char>,
    pub string_remove_color: ::std::option::Option<
        unsafe extern "C" fn(string: *const libc::c_char, replacement: *const libc::c_char)
            -> *mut libc::c_char,
    >,
    pub string_encode_base64: ::std::option::Option<
        unsafe extern "C" fn(from: *const libc::c_char, length: libc::c_int, to: *mut libc::c_char),
    >,
    pub string_decode_base64: ::std::option::Option<
        unsafe extern "C" fn(from: *const libc::c_char, to: *mut libc::c_char) -> libc::c_int,
    >,
    pub string_hex_dump: ::std::option::Option<
        unsafe extern "C" fn(
            data: *const libc::c_char,
            data_size: libc::c_int,
            bytes_per_line: libc::c_int,
            prefix: *const libc::c_char,
            suffix: *const libc::c_char,
        ) -> *mut libc::c_char,
    >,
    pub string_is_command_char:
        ::std::option::Option<unsafe extern "C" fn(string: *const libc::c_char) -> libc::c_int>,
    pub string_input_for_buffer: ::std::option::Option<
        unsafe extern "C" fn(string: *const libc::c_char) -> *const libc::c_char,
    >,
    pub string_eval_expression: ::std::option::Option<
        unsafe extern "C" fn(
            expr: *const libc::c_char,
            pointers: *mut t_hashtable,
            extra_vars: *mut t_hashtable,
            options: *mut t_hashtable,
        ) -> *mut libc::c_char,
    >,
    pub string_dyn_alloc: ::std::option::Option<
        unsafe extern "C" fn(size_alloc: libc::c_int) -> *mut *mut libc::c_char,
    >,
    pub string_dyn_copy: ::std::option::Option<
        unsafe extern "C" fn(string: *mut *mut libc::c_char, new_string: *const libc::c_char)
            -> libc::c_int,
    >,
    pub string_dyn_concat: ::std::option::Option<
        unsafe extern "C" fn(string: *mut *mut libc::c_char, add: *const libc::c_char)
            -> libc::c_int,
    >,
    pub string_dyn_free: ::std::option::Option<
        unsafe extern "C" fn(string: *mut *mut libc::c_char, free_string: libc::c_int)
            -> *mut libc::c_char,
    >,
    pub utf8_has_8bits:
        ::std::option::Option<unsafe extern "C" fn(string: *const libc::c_char) -> libc::c_int>,
    pub utf8_is_valid: ::std::option::Option<
        unsafe extern "C" fn(
            string: *const libc::c_char,
            length: libc::c_int,
            error: *mut *mut libc::c_char,
        ) -> libc::c_int,
    >,
    pub utf8_normalize: ::std::option::Option<
        unsafe extern "C" fn(string: *mut libc::c_char, replacement: libc::c_char),
    >,
    pub utf8_prev_char: ::std::option::Option<
        unsafe extern "C" fn(string_start: *const libc::c_char, string: *const libc::c_char)
            -> *const libc::c_char,
    >,
    pub utf8_next_char: ::std::option::Option<
        unsafe extern "C" fn(string: *const libc::c_char) -> *const libc::c_char,
    >,
    pub utf8_char_int:
        ::std::option::Option<unsafe extern "C" fn(string: *const libc::c_char) -> libc::c_int>,
    pub utf8_char_size:
        ::std::option::Option<unsafe extern "C" fn(string: *const libc::c_char) -> libc::c_int>,
    pub utf8_strlen:
        ::std::option::Option<unsafe extern "C" fn(string: *const libc::c_char) -> libc::c_int>,
    pub utf8_strnlen: ::std::option::Option<
        unsafe extern "C" fn(string: *const libc::c_char, bytes: libc::c_int) -> libc::c_int,
    >,
    pub utf8_strlen_screen:
        ::std::option::Option<unsafe extern "C" fn(string: *const libc::c_char) -> libc::c_int>,
    pub utf8_charcmp: ::std::option::Option<
        unsafe extern "C" fn(string1: *const libc::c_char, string2: *const libc::c_char)
            -> libc::c_int,
    >,
    pub utf8_charcasecmp: ::std::option::Option<
        unsafe extern "C" fn(string1: *const libc::c_char, string2: *const libc::c_char)
            -> libc::c_int,
    >,
    pub utf8_char_size_screen:
        ::std::option::Option<unsafe extern "C" fn(string: *const libc::c_char) -> libc::c_int>,
    pub utf8_add_offset: ::std::option::Option<
        unsafe extern "C" fn(string: *const libc::c_char, offset: libc::c_int)
            -> *const libc::c_char,
    >,
    pub utf8_real_pos: ::std::option::Option<
        unsafe extern "C" fn(string: *const libc::c_char, pos: libc::c_int) -> libc::c_int,
    >,
    pub utf8_pos: ::std::option::Option<
        unsafe extern "C" fn(string: *const libc::c_char, real_pos: libc::c_int) -> libc::c_int,
    >,
    pub utf8_strndup: ::std::option::Option<
        unsafe extern "C" fn(string: *const libc::c_char, length: libc::c_int) -> *mut libc::c_char,
    >,
    pub mkdir_home: ::std::option::Option<
        unsafe extern "C" fn(directory: *const libc::c_char, mode: libc::c_int) -> libc::c_int,
    >,
    pub mkdir: ::std::option::Option<
        unsafe extern "C" fn(directory: *const libc::c_char, mode: libc::c_int) -> libc::c_int,
    >,
    pub mkdir_parents: ::std::option::Option<
        unsafe extern "C" fn(directory: *const libc::c_char, mode: libc::c_int) -> libc::c_int,
    >,
    pub exec_on_files: ::std::option::Option<
        unsafe extern "C" fn(
            directory: *const libc::c_char,
            recurse_subdirs: libc::c_int,
            hidden_files: libc::c_int,
            callback: ::std::option::Option<
                unsafe extern "C" fn(data: *mut libc::c_void, filename: *const libc::c_char),
            >,
            callback_data: *mut libc::c_void,
        ),
    >,
    pub file_get_content: ::std::option::Option<
        unsafe extern "C" fn(filename: *const libc::c_char) -> *mut libc::c_char,
    >,
    pub util_timeval_cmp: ::std::option::Option<
        unsafe extern "C" fn(tv1: *mut timeval, tv2: *mut timeval) -> libc::c_int,
    >,
    pub util_timeval_diff: ::std::option::Option<
        unsafe extern "C" fn(tv1: *mut timeval, tv2: *mut timeval) -> libc::c_longlong,
    >,
    pub util_timeval_add:
        ::std::option::Option<unsafe extern "C" fn(tv: *mut timeval, interval: libc::c_longlong)>,
    pub util_get_time_string:
        ::std::option::Option<unsafe extern "C" fn(date: *const time_t) -> *const libc::c_char>,
    pub util_version_number:
        ::std::option::Option<unsafe extern "C" fn(version: *const libc::c_char) -> libc::c_int>,
    pub list_new: ::std::option::Option<unsafe extern "C" fn() -> *mut t_weelist>,
    pub list_add: ::std::option::Option<
        unsafe extern "C" fn(
            weelist: *mut t_weelist,
            data: *const libc::c_char,
            where_: *const libc::c_char,
            user_data: *mut libc::c_void,
        ) -> *mut t_weelist_item,
    >,
    pub list_search: ::std::option::Option<
        unsafe extern "C" fn(weelist: *mut t_weelist, data: *const libc::c_char)
            -> *mut t_weelist_item,
    >,
    pub list_search_pos: ::std::option::Option<
        unsafe extern "C" fn(weelist: *mut t_weelist, data: *const libc::c_char) -> libc::c_int,
    >,
    pub list_casesearch: ::std::option::Option<
        unsafe extern "C" fn(weelist: *mut t_weelist, data: *const libc::c_char)
            -> *mut t_weelist_item,
    >,
    pub list_casesearch_pos: ::std::option::Option<
        unsafe extern "C" fn(weelist: *mut t_weelist, data: *const libc::c_char) -> libc::c_int,
    >,
    pub list_get: ::std::option::Option<
        unsafe extern "C" fn(weelist: *mut t_weelist, position: libc::c_int) -> *mut t_weelist_item,
    >,
    pub list_set: ::std::option::Option<
        unsafe extern "C" fn(item: *mut t_weelist_item, value: *const libc::c_char),
    >,
    pub list_next: ::std::option::Option<
        unsafe extern "C" fn(item: *mut t_weelist_item) -> *mut t_weelist_item,
    >,
    pub list_prev: ::std::option::Option<
        unsafe extern "C" fn(item: *mut t_weelist_item) -> *mut t_weelist_item,
    >,
    pub list_string: ::std::option::Option<
        unsafe extern "C" fn(item: *mut t_weelist_item) -> *const libc::c_char,
    >,
    pub list_size:
        ::std::option::Option<unsafe extern "C" fn(weelist: *mut t_weelist) -> libc::c_int>,
    pub list_remove: ::std::option::Option<
        unsafe extern "C" fn(weelist: *mut t_weelist, item: *mut t_weelist_item),
    >,
    pub list_remove_all: ::std::option::Option<unsafe extern "C" fn(weelist: *mut t_weelist)>,
    pub list_free: ::std::option::Option<unsafe extern "C" fn(weelist: *mut t_weelist)>,
    pub arraylist_new: ::std::option::Option<
        unsafe extern "C" fn(
            initial_size: libc::c_int,
            sorted: libc::c_int,
            allow_duplicates: libc::c_int,
            callback_cmp: ::std::option::Option<
                unsafe extern "C" fn(
                    data: *mut libc::c_void,
                    arraylist: *mut t_arraylist,
                    pointer1: *mut libc::c_void,
                    pointer2: *mut libc::c_void,
                ) -> libc::c_int,
            >,
            callback_cmp_data: *mut libc::c_void,
            callback_free: ::std::option::Option<
                unsafe extern "C" fn(
                    data: *mut libc::c_void,
                    arraylist: *mut t_arraylist,
                    pointer: *mut libc::c_void,
                ),
            >,
            callback_free_data: *mut libc::c_void,
        ) -> *mut t_arraylist,
    >,
    pub arraylist_size:
        ::std::option::Option<unsafe extern "C" fn(arraylist: *mut t_arraylist) -> libc::c_int>,
    pub arraylist_get: ::std::option::Option<
        unsafe extern "C" fn(arraylist: *mut t_arraylist, index: libc::c_int) -> *mut libc::c_void,
    >,
    pub arraylist_search: ::std::option::Option<
        unsafe extern "C" fn(
            arraylist: *mut t_arraylist,
            pointer: *mut libc::c_void,
            index: *mut libc::c_int,
            index_insert: *mut libc::c_int,
        ) -> *mut libc::c_void,
    >,
    pub arraylist_insert: ::std::option::Option<
        unsafe extern "C" fn(
            arraylist: *mut t_arraylist,
            index: libc::c_int,
            pointer: *mut libc::c_void,
        ) -> libc::c_int,
    >,
    pub arraylist_add: ::std::option::Option<
        unsafe extern "C" fn(arraylist: *mut t_arraylist, pointer: *mut libc::c_void)
            -> libc::c_int,
    >,
    pub arraylist_remove: ::std::option::Option<
        unsafe extern "C" fn(arraylist: *mut t_arraylist, index: libc::c_int) -> libc::c_int,
    >,
    pub arraylist_clear:
        ::std::option::Option<unsafe extern "C" fn(arraylist: *mut t_arraylist) -> libc::c_int>,
    pub arraylist_free: ::std::option::Option<unsafe extern "C" fn(arraylist: *mut t_arraylist)>,
    pub hashtable_new: ::std::option::Option<
        unsafe extern "C" fn(
            size: libc::c_int,
            type_keys: *const libc::c_char,
            type_values: *const libc::c_char,
            callback_hash_key: ::std::option::Option<
                unsafe extern "C" fn(hashtable: *mut t_hashtable, key: *const libc::c_void)
                    -> libc::c_ulonglong,
            >,
            callback_keycmp: ::std::option::Option<
                unsafe extern "C" fn(
                    hashtable: *mut t_hashtable,
                    key1: *const libc::c_void,
                    key2: *const libc::c_void,
                ) -> libc::c_int,
            >,
        ) -> *mut t_hashtable,
    >,
    pub hashtable_set_with_size: ::std::option::Option<
        unsafe extern "C" fn(
            hashtable: *mut t_hashtable,
            key: *const libc::c_void,
            key_size: libc::c_int,
            value: *const libc::c_void,
            value_size: libc::c_int,
        ) -> *mut t_hashtable_item,
    >,
    pub hashtable_set: ::std::option::Option<
        unsafe extern "C" fn(
            hashtable: *mut t_hashtable,
            key: *const libc::c_void,
            value: *const libc::c_void,
        ) -> *mut t_hashtable_item,
    >,
    pub hashtable_get: ::std::option::Option<
        unsafe extern "C" fn(hashtable: *mut t_hashtable, key: *const libc::c_void)
            -> *mut libc::c_void,
    >,
    pub hashtable_has_key: ::std::option::Option<
        unsafe extern "C" fn(hashtable: *mut t_hashtable, key: *const libc::c_void) -> libc::c_int,
    >,
    pub hashtable_map: ::std::option::Option<
        unsafe extern "C" fn(
            hashtable: *mut t_hashtable,
            callback_map: ::std::option::Option<
                unsafe extern "C" fn(
                    data: *mut libc::c_void,
                    hashtable: *mut t_hashtable,
                    key: *const libc::c_void,
                    value: *const libc::c_void,
                ),
            >,
            callback_map_data: *mut libc::c_void,
        ),
    >,
    pub hashtable_map_string: ::std::option::Option<
        unsafe extern "C" fn(
            hashtable: *mut t_hashtable,
            callback_map: ::std::option::Option<
                unsafe extern "C" fn(
                    data: *mut libc::c_void,
                    hashtable: *mut t_hashtable,
                    key: *const libc::c_char,
                    value: *const libc::c_char,
                ),
            >,
            callback_map_data: *mut libc::c_void,
        ),
    >,
    pub hashtable_dup: ::std::option::Option<
        unsafe extern "C" fn(hashtable: *mut t_hashtable) -> *mut t_hashtable,
    >,
    pub hashtable_get_integer: ::std::option::Option<
        unsafe extern "C" fn(hashtable: *mut t_hashtable, property: *const libc::c_char)
            -> libc::c_int,
    >,
    pub hashtable_get_string: ::std::option::Option<
        unsafe extern "C" fn(hashtable: *mut t_hashtable, property: *const libc::c_char)
            -> *const libc::c_char,
    >,
    pub hashtable_set_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            hashtable: *mut t_hashtable,
            property: *const libc::c_char,
            pointer: *mut libc::c_void,
        ),
    >,
    pub hashtable_add_to_infolist: ::std::option::Option<
        unsafe extern "C" fn(
            hashtable: *mut t_hashtable,
            infolist_item: *mut t_infolist_item,
            prefix: *const libc::c_char,
        ) -> libc::c_int,
    >,
    pub hashtable_add_from_infolist: ::std::option::Option<
        unsafe extern "C" fn(
            hashtable: *mut t_hashtable,
            infolist: *mut t_infolist,
            prefix: *const libc::c_char,
        ) -> libc::c_int,
    >,
    pub hashtable_remove: ::std::option::Option<
        unsafe extern "C" fn(hashtable: *mut t_hashtable, key: *const libc::c_void),
    >,
    pub hashtable_remove_all:
        ::std::option::Option<unsafe extern "C" fn(hashtable: *mut t_hashtable)>,
    pub hashtable_free: ::std::option::Option<unsafe extern "C" fn(hashtable: *mut t_hashtable)>,
    pub config_new: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            name: *const libc::c_char,
            callback_reload: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    config_file: *mut t_config_file,
                ) -> libc::c_int,
            >,
            callback_reload_pointer: *const libc::c_void,
            callback_reload_data: *mut libc::c_void,
        ) -> *mut t_config_file,
    >,
    pub config_new_section: ::std::option::Option<
        unsafe extern "C" fn(
            config_file: *mut t_config_file,
            name: *const libc::c_char,
            user_can_add_options: libc::c_int,
            user_can_delete_options: libc::c_int,
            callback_read: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    config_file: *mut t_config_file,
                    section: *mut t_config_section,
                    option_name: *const libc::c_char,
                    value: *const libc::c_char,
                ) -> libc::c_int,
            >,
            callback_read_pointer: *const libc::c_void,
            callback_read_data: *mut libc::c_void,
            callback_write: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    config_file: *mut t_config_file,
                    section_name: *const libc::c_char,
                ) -> libc::c_int,
            >,
            callback_write_pointer: *const libc::c_void,
            callback_write_data: *mut libc::c_void,
            callback_write_default: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    config_file: *mut t_config_file,
                    section_name: *const libc::c_char,
                ) -> libc::c_int,
            >,
            callback_write_default_pointer: *const libc::c_void,
            callback_write_default_data: *mut libc::c_void,
            callback_create_option: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    config_file: *mut t_config_file,
                    section: *mut t_config_section,
                    option_name: *const libc::c_char,
                    value: *const libc::c_char,
                ) -> libc::c_int,
            >,
            callback_create_option_pointer: *const libc::c_void,
            callback_create_option_data: *mut libc::c_void,
            callback_delete_option: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    config_file: *mut t_config_file,
                    section: *mut t_config_section,
                    option: *mut t_config_option,
                ) -> libc::c_int,
            >,
            callback_delete_option_pointer: *const libc::c_void,
            callback_delete_option_data: *mut libc::c_void,
        ) -> *mut t_config_section,
    >,
    pub config_search_section: ::std::option::Option<
        unsafe extern "C" fn(config_file: *mut t_config_file, section_name: *const libc::c_char)
            -> *mut t_config_section,
    >,
    pub config_new_option: ::std::option::Option<
        unsafe extern "C" fn(
            config_file: *mut t_config_file,
            section: *mut t_config_section,
            name: *const libc::c_char,
            type_: *const libc::c_char,
            description: *const libc::c_char,
            string_values: *const libc::c_char,
            min: libc::c_int,
            max: libc::c_int,
            default_value: *const libc::c_char,
            value: *const libc::c_char,
            null_value_allowed: libc::c_int,
            callback_check_value: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    option: *mut t_config_option,
                    value: *const libc::c_char,
                ) -> libc::c_int,
            >,
            callback_check_value_pointer: *const libc::c_void,
            callback_check_value_data: *mut libc::c_void,
            callback_change: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    option: *mut t_config_option,
                ),
            >,
            callback_change_pointer: *const libc::c_void,
            callback_change_data: *mut libc::c_void,
            callback_delete: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    option: *mut t_config_option,
                ),
            >,
            callback_delete_pointer: *const libc::c_void,
            callback_delete_data: *mut libc::c_void,
        ) -> *mut t_config_option,
    >,
    pub config_search_option: ::std::option::Option<
        unsafe extern "C" fn(
            config_file: *mut t_config_file,
            section: *mut t_config_section,
            option_name: *const libc::c_char,
        ) -> *mut t_config_option,
    >,
    pub config_search_section_option: ::std::option::Option<
        unsafe extern "C" fn(
            config_file: *mut t_config_file,
            section: *mut t_config_section,
            option_name: *const libc::c_char,
            section_found: *mut *mut t_config_section,
            option_found: *mut *mut t_config_option,
        ),
    >,
    pub config_search_with_string: ::std::option::Option<
        unsafe extern "C" fn(
            option_name: *const libc::c_char,
            config_file: *mut *mut t_config_file,
            section: *mut *mut t_config_section,
            option: *mut *mut t_config_option,
            pos_option_name: *mut *mut libc::c_char,
        ),
    >,
    pub config_string_to_boolean:
        ::std::option::Option<unsafe extern "C" fn(text: *const libc::c_char) -> libc::c_int>,
    pub config_option_reset: ::std::option::Option<
        unsafe extern "C" fn(option: *mut t_config_option, run_callback: libc::c_int)
            -> libc::c_int,
    >,
    pub config_option_set: ::std::option::Option<
        unsafe extern "C" fn(
            option: *mut t_config_option,
            value: *const libc::c_char,
            run_callback: libc::c_int,
        ) -> libc::c_int,
    >,
    pub config_option_set_null: ::std::option::Option<
        unsafe extern "C" fn(option: *mut t_config_option, run_callback: libc::c_int)
            -> libc::c_int,
    >,
    pub config_option_unset:
        ::std::option::Option<unsafe extern "C" fn(option: *mut t_config_option) -> libc::c_int>,
    pub config_option_rename: ::std::option::Option<
        unsafe extern "C" fn(option: *mut t_config_option, new_name: *const libc::c_char),
    >,
    pub config_option_get_string: ::std::option::Option<
        unsafe extern "C" fn(option: *mut t_config_option, property: *const libc::c_char)
            -> *const libc::c_char,
    >,
    pub config_option_get_pointer: ::std::option::Option<
        unsafe extern "C" fn(option: *mut t_config_option, property: *const libc::c_char)
            -> *mut libc::c_void,
    >,
    pub config_option_is_null:
        ::std::option::Option<unsafe extern "C" fn(option: *mut t_config_option) -> libc::c_int>,
    pub config_option_default_is_null:
        ::std::option::Option<unsafe extern "C" fn(option: *mut t_config_option) -> libc::c_int>,
    pub config_boolean:
        ::std::option::Option<unsafe extern "C" fn(option: *mut t_config_option) -> libc::c_int>,
    pub config_boolean_default:
        ::std::option::Option<unsafe extern "C" fn(option: *mut t_config_option) -> libc::c_int>,
    pub config_integer:
        ::std::option::Option<unsafe extern "C" fn(option: *mut t_config_option) -> libc::c_int>,
    pub config_integer_default:
        ::std::option::Option<unsafe extern "C" fn(option: *mut t_config_option) -> libc::c_int>,
    pub config_string: ::std::option::Option<
        unsafe extern "C" fn(option: *mut t_config_option) -> *const libc::c_char,
    >,
    pub config_string_default: ::std::option::Option<
        unsafe extern "C" fn(option: *mut t_config_option) -> *const libc::c_char,
    >,
    pub config_color: ::std::option::Option<
        unsafe extern "C" fn(option: *mut t_config_option) -> *const libc::c_char,
    >,
    pub config_color_default: ::std::option::Option<
        unsafe extern "C" fn(option: *mut t_config_option) -> *const libc::c_char,
    >,
    pub config_write_option: ::std::option::Option<
        unsafe extern "C" fn(config_file: *mut t_config_file, option: *mut t_config_option)
            -> libc::c_int,
    >,
    pub config_write_line: ::std::option::Option<
        unsafe extern "C" fn(
            config_file: *mut t_config_file,
            option_name: *const libc::c_char,
            value: *const libc::c_char,
            ...
        ) -> libc::c_int,
    >,
    pub config_write:
        ::std::option::Option<unsafe extern "C" fn(config_file: *mut t_config_file) -> libc::c_int>,
    pub config_read:
        ::std::option::Option<unsafe extern "C" fn(config_file: *mut t_config_file) -> libc::c_int>,
    pub config_reload:
        ::std::option::Option<unsafe extern "C" fn(config_file: *mut t_config_file) -> libc::c_int>,
    pub config_option_free:
        ::std::option::Option<unsafe extern "C" fn(option: *mut t_config_option)>,
    pub config_section_free_options:
        ::std::option::Option<unsafe extern "C" fn(section: *mut t_config_section)>,
    pub config_section_free:
        ::std::option::Option<unsafe extern "C" fn(section: *mut t_config_section)>,
    pub config_free: ::std::option::Option<unsafe extern "C" fn(config_file: *mut t_config_file)>,
    pub config_get: ::std::option::Option<
        unsafe extern "C" fn(option_name: *const libc::c_char) -> *mut t_config_option,
    >,
    pub config_get_plugin: ::std::option::Option<
        unsafe extern "C" fn(plugin: *mut t_weechat_plugin, option_name: *const libc::c_char)
            -> *const libc::c_char,
    >,
    pub config_is_set_plugin: ::std::option::Option<
        unsafe extern "C" fn(plugin: *mut t_weechat_plugin, option_name: *const libc::c_char)
            -> libc::c_int,
    >,
    pub config_set_plugin: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            option_name: *const libc::c_char,
            value: *const libc::c_char,
        ) -> libc::c_int,
    >,
    pub config_set_desc_plugin: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            option_name: *const libc::c_char,
            description: *const libc::c_char,
        ),
    >,
    pub config_unset_plugin: ::std::option::Option<
        unsafe extern "C" fn(plugin: *mut t_weechat_plugin, option_name: *const libc::c_char)
            -> libc::c_int,
    >,
    pub key_bind: ::std::option::Option<
        unsafe extern "C" fn(context: *const libc::c_char, keys: *mut t_hashtable) -> libc::c_int,
    >,
    pub key_unbind: ::std::option::Option<
        unsafe extern "C" fn(context: *const libc::c_char, key: *const libc::c_char) -> libc::c_int,
    >,
    pub prefix: ::std::option::Option<
        unsafe extern "C" fn(prefix: *const libc::c_char) -> *const libc::c_char,
    >,
    pub color: ::std::option::Option<
        unsafe extern "C" fn(color_name: *const libc::c_char) -> *const libc::c_char,
    >,
    pub printf_date_tags: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            date: time_t,
            tags: *const libc::c_char,
            message: *const libc::c_char,
            ...
        ),
    >,
    pub printf_y: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            y: libc::c_int,
            message: *const libc::c_char,
            ...
        ),
    >,
    pub log_printf: ::std::option::Option<unsafe extern "C" fn(message: *const libc::c_char, ...)>,
    pub hook_command: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            command: *const libc::c_char,
            description: *const libc::c_char,
            args: *const libc::c_char,
            args_description: *const libc::c_char,
            completion: *const libc::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    buffer: *mut t_gui_buffer,
                    argc: libc::c_int,
                    argv: *mut *mut libc::c_char,
                    argv_eol: *mut *mut libc::c_char,
                ) -> libc::c_int,
            >,
            callback_pointer: *const libc::c_void,
            callback_data: *mut libc::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_command_run: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            command: *const libc::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    buffer: *mut t_gui_buffer,
                    command: *const libc::c_char,
                ) -> libc::c_int,
            >,
            callback_pointer: *const libc::c_void,
            callback_data: *mut libc::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_timer: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            interval: libc::c_long,
            align_second: libc::c_int,
            max_calls: libc::c_int,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    remaining_calls: libc::c_int,
                ) -> libc::c_int,
            >,
            callback_pointer: *const libc::c_void,
            callback_data: *mut libc::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_fd: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            fd: libc::c_int,
            flag_read: libc::c_int,
            flag_write: libc::c_int,
            flag_exception: libc::c_int,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    fd: libc::c_int,
                ) -> libc::c_int,
            >,
            callback_pointer: *const libc::c_void,
            callback_data: *mut libc::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_process: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            command: *const libc::c_char,
            timeout: libc::c_int,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    command: *const libc::c_char,
                    return_code: libc::c_int,
                    out: *const libc::c_char,
                    err: *const libc::c_char,
                ) -> libc::c_int,
            >,
            callback_pointer: *const libc::c_void,
            callback_data: *mut libc::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_process_hashtable: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            command: *const libc::c_char,
            options: *mut t_hashtable,
            timeout: libc::c_int,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    command: *const libc::c_char,
                    return_code: libc::c_int,
                    out: *const libc::c_char,
                    err: *const libc::c_char,
                ) -> libc::c_int,
            >,
            callback_pointer: *const libc::c_void,
            callback_data: *mut libc::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_connect: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            proxy: *const libc::c_char,
            address: *const libc::c_char,
            port: libc::c_int,
            ipv6: libc::c_int,
            retry: libc::c_int,
            gnutls_sess: *mut libc::c_void,
            gnutls_cb: *mut libc::c_void,
            gnutls_dhkey_size: libc::c_int,
            gnutls_priorities: *const libc::c_char,
            local_hostname: *const libc::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    status: libc::c_int,
                    gnutls_rc: libc::c_int,
                    sock: libc::c_int,
                    error: *const libc::c_char,
                    ip_address: *const libc::c_char,
                ) -> libc::c_int,
            >,
            callback_pointer: *const libc::c_void,
            callback_data: *mut libc::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_print: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            buffer: *mut t_gui_buffer,
            tags: *const libc::c_char,
            message: *const libc::c_char,
            strip_colors: libc::c_int,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    buffer: *mut t_gui_buffer,
                    date: time_t,
                    tags_count: libc::c_int,
                    tags: *mut *const libc::c_char,
                    displayed: libc::c_int,
                    highlight: libc::c_int,
                    prefix: *const libc::c_char,
                    message: *const libc::c_char,
                ) -> libc::c_int,
            >,
            callback_pointer: *const libc::c_void,
            callback_data: *mut libc::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_signal: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            signal: *const libc::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    signal: *const libc::c_char,
                    type_data: *const libc::c_char,
                    signal_data: *mut libc::c_void,
                ) -> libc::c_int,
            >,
            callback_pointer: *const libc::c_void,
            callback_data: *mut libc::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_signal_send: ::std::option::Option<
        unsafe extern "C" fn(
            signal: *const libc::c_char,
            type_data: *const libc::c_char,
            signal_data: *mut libc::c_void,
        ) -> libc::c_int,
    >,
    pub hook_hsignal: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            signal: *const libc::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    signal: *const libc::c_char,
                    hashtable: *mut t_hashtable,
                ) -> libc::c_int,
            >,
            callback_pointer: *const libc::c_void,
            callback_data: *mut libc::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_hsignal_send: ::std::option::Option<
        unsafe extern "C" fn(signal: *const libc::c_char, hashtable: *mut t_hashtable)
            -> libc::c_int,
    >,
    pub hook_config: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            option: *const libc::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    option: *const libc::c_char,
                    value: *const libc::c_char,
                ) -> libc::c_int,
            >,
            callback_pointer: *const libc::c_void,
            callback_data: *mut libc::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_completion: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            completion_item: *const libc::c_char,
            description: *const libc::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    completion_item: *const libc::c_char,
                    buffer: *mut t_gui_buffer,
                    completion: *mut t_gui_completion,
                ) -> libc::c_int,
            >,
            callback_pointer: *const libc::c_void,
            callback_data: *mut libc::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_completion_get_string: ::std::option::Option<
        unsafe extern "C" fn(completion: *mut t_gui_completion, property: *const libc::c_char)
            -> *const libc::c_char,
    >,
    pub hook_completion_list_add: ::std::option::Option<
        unsafe extern "C" fn(
            completion: *mut t_gui_completion,
            word: *const libc::c_char,
            nick_completion: libc::c_int,
            where_: *const libc::c_char,
        ),
    >,
    pub hook_modifier: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            modifier: *const libc::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    modifier: *const libc::c_char,
                    modifier_data: *const libc::c_char,
                    string: *const libc::c_char,
                ) -> *mut libc::c_char,
            >,
            callback_pointer: *const libc::c_void,
            callback_data: *mut libc::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_modifier_exec: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            modifier: *const libc::c_char,
            modifier_data: *const libc::c_char,
            string: *const libc::c_char,
        ) -> *mut libc::c_char,
    >,
    pub hook_info: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            info_name: *const libc::c_char,
            description: *const libc::c_char,
            args_description: *const libc::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    info_name: *const libc::c_char,
                    arguments: *const libc::c_char,
                ) -> *const libc::c_char,
            >,
            callback_pointer: *const libc::c_void,
            callback_data: *mut libc::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_info_hashtable: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            info_name: *const libc::c_char,
            description: *const libc::c_char,
            args_description: *const libc::c_char,
            output_description: *const libc::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    info_name: *const libc::c_char,
                    hashtable: *mut t_hashtable,
                ) -> *mut t_hashtable,
            >,
            callback_pointer: *const libc::c_void,
            callback_data: *mut libc::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_infolist: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            infolist_name: *const libc::c_char,
            description: *const libc::c_char,
            pointer_description: *const libc::c_char,
            args_description: *const libc::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    cb_pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    infolist_name: *const libc::c_char,
                    obj_pointer: *mut libc::c_void,
                    arguments: *const libc::c_char,
                ) -> *mut t_infolist,
            >,
            callback_pointer: *const libc::c_void,
            callback_data: *mut libc::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_hdata: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            hdata_name: *const libc::c_char,
            description: *const libc::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    hdata_name: *const libc::c_char,
                ) -> *mut t_hdata,
            >,
            callback_pointer: *const libc::c_void,
            callback_data: *mut libc::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_focus: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            area: *const libc::c_char,
            callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    info: *mut t_hashtable,
                ) -> *mut t_hashtable,
            >,
            callback_pointer: *const libc::c_void,
            callback_data: *mut libc::c_void,
        ) -> *mut t_hook,
    >,
    pub hook_set: ::std::option::Option<
        unsafe extern "C" fn(
            hook: *mut t_hook,
            property: *const libc::c_char,
            value: *const libc::c_char,
        ),
    >,
    pub unhook: ::std::option::Option<unsafe extern "C" fn(hook: *mut t_hook)>,
    pub unhook_all: ::std::option::Option<
        unsafe extern "C" fn(plugin: *mut t_weechat_plugin, subplugin: *const libc::c_char),
    >,
    pub buffer_new: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            name: *const libc::c_char,
            input_callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    buffer: *mut t_gui_buffer,
                    input_data: *const libc::c_char,
                ) -> libc::c_int,
            >,
            input_callback_pointer: *const libc::c_void,
            input_callback_data: *mut libc::c_void,
            close_callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    buffer: *mut t_gui_buffer,
                ) -> libc::c_int,
            >,
            close_callback_pointer: *const libc::c_void,
            close_callback_data: *mut libc::c_void,
        ) -> *mut t_gui_buffer,
    >,
    pub buffer_search: ::std::option::Option<
        unsafe extern "C" fn(plugin: *const libc::c_char, name: *const libc::c_char)
            -> *mut t_gui_buffer,
    >,
    pub buffer_search_main: ::std::option::Option<unsafe extern "C" fn() -> *mut t_gui_buffer>,
    pub buffer_clear: ::std::option::Option<unsafe extern "C" fn(buffer: *mut t_gui_buffer)>,
    pub buffer_close: ::std::option::Option<unsafe extern "C" fn(buffer: *mut t_gui_buffer)>,
    pub buffer_merge: ::std::option::Option<
        unsafe extern "C" fn(buffer: *mut t_gui_buffer, target_buffer: *mut t_gui_buffer),
    >,
    pub buffer_unmerge:
        ::std::option::Option<unsafe extern "C" fn(buffer: *mut t_gui_buffer, number: libc::c_int)>,
    pub buffer_get_integer: ::std::option::Option<
        unsafe extern "C" fn(buffer: *mut t_gui_buffer, property: *const libc::c_char)
            -> libc::c_int,
    >,
    pub buffer_get_string: ::std::option::Option<
        unsafe extern "C" fn(buffer: *mut t_gui_buffer, property: *const libc::c_char)
            -> *const libc::c_char,
    >,
    pub buffer_get_pointer: ::std::option::Option<
        unsafe extern "C" fn(buffer: *mut t_gui_buffer, property: *const libc::c_char)
            -> *mut libc::c_void,
    >,
    pub buffer_set: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            property: *const libc::c_char,
            value: *const libc::c_char,
        ),
    >,
    pub buffer_set_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            property: *const libc::c_char,
            pointer: *mut libc::c_void,
        ),
    >,
    pub buffer_string_replace_local_var: ::std::option::Option<
        unsafe extern "C" fn(buffer: *mut t_gui_buffer, string: *const libc::c_char)
            -> *mut libc::c_char,
    >,
    pub buffer_match_list: ::std::option::Option<
        unsafe extern "C" fn(buffer: *mut t_gui_buffer, string: *const libc::c_char) -> libc::c_int,
    >,
    pub window_search_with_buffer:
        ::std::option::Option<unsafe extern "C" fn(buffer: *mut t_gui_buffer) -> *mut t_gui_window>,
    pub window_get_integer: ::std::option::Option<
        unsafe extern "C" fn(window: *mut t_gui_window, property: *const libc::c_char)
            -> libc::c_int,
    >,
    pub window_get_string: ::std::option::Option<
        unsafe extern "C" fn(window: *mut t_gui_window, property: *const libc::c_char)
            -> *const libc::c_char,
    >,
    pub window_get_pointer: ::std::option::Option<
        unsafe extern "C" fn(window: *mut t_gui_window, property: *const libc::c_char)
            -> *mut libc::c_void,
    >,
    pub window_set_title: ::std::option::Option<unsafe extern "C" fn(title: *const libc::c_char)>,
    pub nicklist_add_group: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            parent_group: *mut t_gui_nick_group,
            name: *const libc::c_char,
            color: *const libc::c_char,
            visible: libc::c_int,
        ) -> *mut t_gui_nick_group,
    >,
    pub nicklist_search_group: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            from_group: *mut t_gui_nick_group,
            name: *const libc::c_char,
        ) -> *mut t_gui_nick_group,
    >,
    pub nicklist_add_nick: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            group: *mut t_gui_nick_group,
            name: *const libc::c_char,
            color: *const libc::c_char,
            prefix: *const libc::c_char,
            prefix_color: *const libc::c_char,
            visible: libc::c_int,
        ) -> *mut t_gui_nick,
    >,
    pub nicklist_search_nick: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            from_group: *mut t_gui_nick_group,
            name: *const libc::c_char,
        ) -> *mut t_gui_nick,
    >,
    pub nicklist_remove_group: ::std::option::Option<
        unsafe extern "C" fn(buffer: *mut t_gui_buffer, group: *mut t_gui_nick_group),
    >,
    pub nicklist_remove_nick: ::std::option::Option<
        unsafe extern "C" fn(buffer: *mut t_gui_buffer, nick: *mut t_gui_nick),
    >,
    pub nicklist_remove_all: ::std::option::Option<unsafe extern "C" fn(buffer: *mut t_gui_buffer)>,
    pub nicklist_get_next_item: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            group: *mut *mut t_gui_nick_group,
            nick: *mut *mut t_gui_nick,
        ),
    >,
    pub nicklist_group_get_integer: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            group: *mut t_gui_nick_group,
            property: *const libc::c_char,
        ) -> libc::c_int,
    >,
    pub nicklist_group_get_string: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            group: *mut t_gui_nick_group,
            property: *const libc::c_char,
        ) -> *const libc::c_char,
    >,
    pub nicklist_group_get_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            group: *mut t_gui_nick_group,
            property: *const libc::c_char,
        ) -> *mut libc::c_void,
    >,
    pub nicklist_group_set: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            group: *mut t_gui_nick_group,
            property: *const libc::c_char,
            value: *const libc::c_char,
        ),
    >,
    pub nicklist_nick_get_integer: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            nick: *mut t_gui_nick,
            property: *const libc::c_char,
        ) -> libc::c_int,
    >,
    pub nicklist_nick_get_string: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            nick: *mut t_gui_nick,
            property: *const libc::c_char,
        ) -> *const libc::c_char,
    >,
    pub nicklist_nick_get_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            nick: *mut t_gui_nick,
            property: *const libc::c_char,
        ) -> *mut libc::c_void,
    >,
    pub nicklist_nick_set: ::std::option::Option<
        unsafe extern "C" fn(
            buffer: *mut t_gui_buffer,
            nick: *mut t_gui_nick,
            property: *const libc::c_char,
            value: *const libc::c_char,
        ),
    >,
    pub bar_item_search: ::std::option::Option<
        unsafe extern "C" fn(name: *const libc::c_char) -> *mut t_gui_bar_item,
    >,
    pub bar_item_new: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            name: *const libc::c_char,
            build_callback: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    item: *mut t_gui_bar_item,
                    window: *mut t_gui_window,
                    buffer: *mut t_gui_buffer,
                    extra_info: *mut t_hashtable,
                ) -> *mut libc::c_char,
            >,
            build_callback_pointer: *const libc::c_void,
            build_callback_data: *mut libc::c_void,
        ) -> *mut t_gui_bar_item,
    >,
    pub bar_item_update: ::std::option::Option<unsafe extern "C" fn(name: *const libc::c_char)>,
    pub bar_item_remove: ::std::option::Option<unsafe extern "C" fn(item: *mut t_gui_bar_item)>,
    pub bar_search:
        ::std::option::Option<unsafe extern "C" fn(name: *const libc::c_char) -> *mut t_gui_bar>,
    pub bar_new: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const libc::c_char,
            hidden: *const libc::c_char,
            priority: *const libc::c_char,
            type_: *const libc::c_char,
            condition: *const libc::c_char,
            position: *const libc::c_char,
            filling_top_bottom: *const libc::c_char,
            filling_left_right: *const libc::c_char,
            size: *const libc::c_char,
            size_max: *const libc::c_char,
            color_fg: *const libc::c_char,
            color_delim: *const libc::c_char,
            color_bg: *const libc::c_char,
            separator: *const libc::c_char,
            items: *const libc::c_char,
        ) -> *mut t_gui_bar,
    >,
    pub bar_set: ::std::option::Option<
        unsafe extern "C" fn(
            bar: *mut t_gui_bar,
            property: *const libc::c_char,
            value: *const libc::c_char,
        ) -> libc::c_int,
    >,
    pub bar_update: ::std::option::Option<unsafe extern "C" fn(name: *const libc::c_char)>,
    pub bar_remove: ::std::option::Option<unsafe extern "C" fn(bar: *mut t_gui_bar)>,
    pub command: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            buffer: *mut t_gui_buffer,
            command: *const libc::c_char,
        ) -> libc::c_int,
    >,
    pub network_pass_proxy: ::std::option::Option<
        unsafe extern "C" fn(
            proxy: *const libc::c_char,
            sock: libc::c_int,
            address: *const libc::c_char,
            port: libc::c_int,
        ) -> libc::c_int,
    >,
    pub network_connect_to: ::std::option::Option<
        unsafe extern "C" fn(
            proxy: *const libc::c_char,
            address: *mut sockaddr,
            address_length: socklen_t,
        ) -> libc::c_int,
    >,
    pub info_get: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            info_name: *const libc::c_char,
            arguments: *const libc::c_char,
        ) -> *const libc::c_char,
    >,
    pub info_get_hashtable: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            info_name: *const libc::c_char,
            hashtable: *mut t_hashtable,
        ) -> *mut t_hashtable,
    >,
    pub infolist_new: ::std::option::Option<
        unsafe extern "C" fn(plugin: *mut t_weechat_plugin) -> *mut t_infolist,
    >,
    pub infolist_new_item: ::std::option::Option<
        unsafe extern "C" fn(infolist: *mut t_infolist) -> *mut t_infolist_item,
    >,
    pub infolist_new_var_integer: ::std::option::Option<
        unsafe extern "C" fn(
            item: *mut t_infolist_item,
            name: *const libc::c_char,
            value: libc::c_int,
        ) -> *mut t_infolist_var,
    >,
    pub infolist_new_var_string: ::std::option::Option<
        unsafe extern "C" fn(
            item: *mut t_infolist_item,
            name: *const libc::c_char,
            value: *const libc::c_char,
        ) -> *mut t_infolist_var,
    >,
    pub infolist_new_var_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            item: *mut t_infolist_item,
            name: *const libc::c_char,
            pointer: *mut libc::c_void,
        ) -> *mut t_infolist_var,
    >,
    pub infolist_new_var_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            item: *mut t_infolist_item,
            name: *const libc::c_char,
            pointer: *mut libc::c_void,
            size: libc::c_int,
        ) -> *mut t_infolist_var,
    >,
    pub infolist_new_var_time: ::std::option::Option<
        unsafe extern "C" fn(item: *mut t_infolist_item, name: *const libc::c_char, time: time_t)
            -> *mut t_infolist_var,
    >,
    pub infolist_search_var: ::std::option::Option<
        unsafe extern "C" fn(infolist: *mut t_infolist, name: *const libc::c_char)
            -> *mut t_infolist_var,
    >,
    pub infolist_get: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            infolist_name: *const libc::c_char,
            pointer: *mut libc::c_void,
            arguments: *const libc::c_char,
        ) -> *mut t_infolist,
    >,
    pub infolist_next:
        ::std::option::Option<unsafe extern "C" fn(infolist: *mut t_infolist) -> libc::c_int>,
    pub infolist_prev:
        ::std::option::Option<unsafe extern "C" fn(infolist: *mut t_infolist) -> libc::c_int>,
    pub infolist_reset_item_cursor:
        ::std::option::Option<unsafe extern "C" fn(infolist: *mut t_infolist)>,
    pub infolist_fields: ::std::option::Option<
        unsafe extern "C" fn(infolist: *mut t_infolist) -> *const libc::c_char,
    >,
    pub infolist_integer: ::std::option::Option<
        unsafe extern "C" fn(infolist: *mut t_infolist, var: *const libc::c_char) -> libc::c_int,
    >,
    pub infolist_string: ::std::option::Option<
        unsafe extern "C" fn(infolist: *mut t_infolist, var: *const libc::c_char)
            -> *const libc::c_char,
    >,
    pub infolist_pointer: ::std::option::Option<
        unsafe extern "C" fn(infolist: *mut t_infolist, var: *const libc::c_char)
            -> *mut libc::c_void,
    >,
    pub infolist_buffer: ::std::option::Option<
        unsafe extern "C" fn(
            infolist: *mut t_infolist,
            var: *const libc::c_char,
            size: *mut libc::c_int,
        ) -> *mut libc::c_void,
    >,
    pub infolist_time: ::std::option::Option<
        unsafe extern "C" fn(infolist: *mut t_infolist, var: *const libc::c_char) -> time_t,
    >,
    pub infolist_free: ::std::option::Option<unsafe extern "C" fn(infolist: *mut t_infolist)>,
    pub hdata_new: ::std::option::Option<
        unsafe extern "C" fn(
            plugin: *mut t_weechat_plugin,
            hdata_name: *const libc::c_char,
            var_prev: *const libc::c_char,
            var_next: *const libc::c_char,
            create_allowed: libc::c_int,
            delete_allowed: libc::c_int,
            callback_update: ::std::option::Option<
                unsafe extern "C" fn(
                    data: *mut libc::c_void,
                    hdata: *mut t_hdata,
                    pointer: *mut libc::c_void,
                    hashtable: *mut t_hashtable,
                ) -> libc::c_int,
            >,
            callback_update_data: *mut libc::c_void,
        ) -> *mut t_hdata,
    >,
    pub hdata_new_var: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            name: *const libc::c_char,
            offset: libc::c_int,
            type_: libc::c_int,
            update_allowed: libc::c_int,
            array_size: *const libc::c_char,
            hdata_name: *const libc::c_char,
        ),
    >,
    pub hdata_new_list: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            name: *const libc::c_char,
            pointer: *mut libc::c_void,
            flags: libc::c_int,
        ),
    >,
    pub hdata_get: ::std::option::Option<
        unsafe extern "C" fn(plugin: *mut t_weechat_plugin, hdata_name: *const libc::c_char)
            -> *mut t_hdata,
    >,
    pub hdata_get_var_offset: ::std::option::Option<
        unsafe extern "C" fn(hdata: *mut t_hdata, name: *const libc::c_char) -> libc::c_int,
    >,
    pub hdata_get_var_type: ::std::option::Option<
        unsafe extern "C" fn(hdata: *mut t_hdata, name: *const libc::c_char) -> libc::c_int,
    >,
    pub hdata_get_var_type_string: ::std::option::Option<
        unsafe extern "C" fn(hdata: *mut t_hdata, name: *const libc::c_char) -> *const libc::c_char,
    >,
    pub hdata_get_var_array_size: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut libc::c_void,
            name: *const libc::c_char,
        ) -> libc::c_int,
    >,
    pub hdata_get_var_array_size_string: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut libc::c_void,
            name: *const libc::c_char,
        ) -> *const libc::c_char,
    >,
    pub hdata_get_var_hdata: ::std::option::Option<
        unsafe extern "C" fn(hdata: *mut t_hdata, name: *const libc::c_char) -> *const libc::c_char,
    >,
    pub hdata_get_var: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut libc::c_void,
            name: *const libc::c_char,
        ) -> *mut libc::c_void,
    >,
    pub hdata_get_var_at_offset: ::std::option::Option<
        unsafe extern "C" fn(hdata: *mut t_hdata, pointer: *mut libc::c_void, offset: libc::c_int)
            -> *mut libc::c_void,
    >,
    pub hdata_get_list: ::std::option::Option<
        unsafe extern "C" fn(hdata: *mut t_hdata, name: *const libc::c_char) -> *mut libc::c_void,
    >,
    pub hdata_check_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            list: *mut libc::c_void,
            pointer: *mut libc::c_void,
        ) -> libc::c_int,
    >,
    pub hdata_move: ::std::option::Option<
        unsafe extern "C" fn(hdata: *mut t_hdata, pointer: *mut libc::c_void, count: libc::c_int)
            -> *mut libc::c_void,
    >,
    pub hdata_search: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut libc::c_void,
            search: *const libc::c_char,
            move_: libc::c_int,
        ) -> *mut libc::c_void,
    >,
    pub hdata_char: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut libc::c_void,
            name: *const libc::c_char,
        ) -> libc::c_char,
    >,
    pub hdata_integer: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut libc::c_void,
            name: *const libc::c_char,
        ) -> libc::c_int,
    >,
    pub hdata_long: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut libc::c_void,
            name: *const libc::c_char,
        ) -> libc::c_long,
    >,
    pub hdata_string: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut libc::c_void,
            name: *const libc::c_char,
        ) -> *const libc::c_char,
    >,
    pub hdata_pointer: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut libc::c_void,
            name: *const libc::c_char,
        ) -> *mut libc::c_void,
    >,
    pub hdata_time: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut libc::c_void,
            name: *const libc::c_char,
        ) -> time_t,
    >,
    pub hdata_hashtable: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut libc::c_void,
            name: *const libc::c_char,
        ) -> *mut t_hashtable,
    >,
    pub hdata_compare: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer1: *mut libc::c_void,
            pointer2: *mut libc::c_void,
            name: *const libc::c_char,
            case_sensitive: libc::c_int,
        ) -> libc::c_int,
    >,
    pub hdata_set: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut libc::c_void,
            name: *const libc::c_char,
            value: *const libc::c_char,
        ) -> libc::c_int,
    >,
    pub hdata_update: ::std::option::Option<
        unsafe extern "C" fn(
            hdata: *mut t_hdata,
            pointer: *mut libc::c_void,
            hashtable: *mut t_hashtable,
        ) -> libc::c_int,
    >,
    pub hdata_get_string: ::std::option::Option<
        unsafe extern "C" fn(hdata: *mut t_hdata, property: *const libc::c_char)
            -> *const libc::c_char,
    >,
    pub upgrade_new: ::std::option::Option<
        unsafe extern "C" fn(
            filename: *const libc::c_char,
            callback_read: ::std::option::Option<
                unsafe extern "C" fn(
                    pointer: *const libc::c_void,
                    data: *mut libc::c_void,
                    upgrade_file: *mut t_upgrade_file,
                    object_id: libc::c_int,
                    infolist: *mut t_infolist,
                ) -> libc::c_int,
            >,
            callback_read_pointer: *const libc::c_void,
            callback_read_data: *mut libc::c_void,
        ) -> *mut t_upgrade_file,
    >,
    pub upgrade_write_object: ::std::option::Option<
        unsafe extern "C" fn(
            upgrade_file: *mut t_upgrade_file,
            object_id: libc::c_int,
            infolist: *mut t_infolist,
        ) -> libc::c_int,
    >,
    pub upgrade_read: ::std::option::Option<
        unsafe extern "C" fn(upgrade_file: *mut t_upgrade_file) -> libc::c_int,
    >,
    pub upgrade_close:
        ::std::option::Option<unsafe extern "C" fn(upgrade_file: *mut t_upgrade_file)>,
}
extern "C" {
    #[link_name = "\u{1}_weechat_plugin_init"]
    pub fn weechat_plugin_init(
        plugin: *mut t_weechat_plugin,
        argc: libc::c_int,
        argv: *mut *mut libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    #[link_name = "\u{1}_weechat_plugin_end"]
    pub fn weechat_plugin_end(plugin: *mut t_weechat_plugin) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_hashtable_item {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_hook {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct t_infolist_var {
    pub _address: u8,
}
